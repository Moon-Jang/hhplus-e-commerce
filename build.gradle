plugins {
    id 'java'
    id("org.springframework.boot") version "3.4.1"
    id("io.spring.dependency-management") version "1.1.7"
    id "com.epages.restdocs-api-spec" version "0.19.2"
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'kr.hhplus.ecommerce'
version = getGitHash()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:2024.0.0")
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'com.redis.testcontainers:testcontainers-redis:1.6.4'
    testImplementation "org.testcontainers:kafka:1.21.0"

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // rdb
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // queryDsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:spring-mock-mvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // validator
    implementation 'commons-validator:commons-validator:1.7'

    // shedlock
    implementation 'net.javacrumbs.shedlock:shedlock-spring:6.3.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:6.3.0'

    // integration-redis
    implementation 'org.springframework.integration:spring-integration-redis:6.4.1'

    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.45.1'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
}

test {
    useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

//openAPI 작성 자동화를 위해 패키징 전에 openapi3 테스크 선실행을 유발
bootJar{
    dependsOn(':openapi3')
}

openapi3 {
    def outputPath = 'src/main/resources/static/api-docs/e-commerce'
    mkdir(outputPath)

    servers = [{ url = "localhost:8080"}]
    title = "항해플러스 e-커머스 API 문서"
    description = "Spring REST Docs with SwaggerUI."
    version = "1.0.0"
    format = 'yaml'

    outputDirectory = outputPath
    outputFileNamePrefix = 'main'
}
